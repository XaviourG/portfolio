/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState } from "react";
import { useGLTF, useTexture } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";

interface props {
  hover: boolean,
  setHover: (state: boolean) => void,
  setDownloading: (state: boolean) => void,
}

export function Model({
  hover,
  setHover,
  setDownloading,
}: props) {
  const resumeTexture = useTexture('resume.png')
  const downloadTexture = useTexture('circuit_texture.jpg')
  let colorMap = resumeTexture;
  const meshRef = React.useRef();

  useFrame(({ clock }) => {
    const a = clock.getElapsedTime();
    if (!hover) {
      meshRef.current.rotation.y += 0.01
    } else {
      meshRef.current.rotation.y += 0.005
    }
  });

  const mouseEnter = () => {
    document.body.style.cursor = 'pointer'
    setHover(true);
  }

  const mouseLeave = () => {
    document.body.style.cursor = 'auto'
    setHover(false);
  }

  const downloadResume = () => {
    setDownloading(true);
    fetch('xaviour_g_resume.pdf').then(response => {
      response.blob().then(blob => {
          // Creating new object of PDF file
          const fileURL = window.URL.createObjectURL(blob);
          // Setting various property values
          let alink = document.createElement('a');
          alink.href = fileURL;
          alink.download = 'xaviour_g_resume.pdf';
          alink.click();
          setDownloading(false);
      });
    });
  };

  return (
    <group dispose={null}>
      <mesh ref={meshRef}
        scale={0.15}
        castShadow
        receiveShadow
        position={[0, 0, 0]}
        rotation={[0,0,-0.2]}
        onPointerEnter={(e) => mouseEnter()}
        onPointerLeave={(e) => mouseLeave()}
        onClick={(e) => downloadResume()}
      >
        <boxGeometry args={[21, 29.7, 0.5]}/>
        <meshStandardMaterial map={colorMap} />
      </mesh>
    </group>
  );
}